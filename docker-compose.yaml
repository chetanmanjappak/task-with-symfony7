version: '3.3'

volumes:
  database_data_new:
    driver: local
  rabbitmqetc:
    driver: local
  rabbitmqdata:
    driver: local
  rabbitmqlogs:
    driver: local

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

services:
  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - backend

  db:
    image: mysql:8.0
    ports:
      - "3307:3306"
    volumes:
      - database_data_new:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: docker
    restart: on-failure
    networks:
      - backend
      
  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    environment:
      RABBITMQ_ERLANG_COOKIE: rabbitmqcookie
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: docker
    volumes:
      - rabbitmqetc:/etc/rabbitmq/
      - rabbitmqdata:/var/lib/rabbitmq/
      - rabbitmqlogs:/var/log/rabbitmq/
    networks:
      - backend
    restart: on-failure
    ports:
      - "5672:5672"
      - "15672:15672"
  php:
    image: ghcr.io/debricked/docker-image-php-xdebug:latest
    environment:
      PHP_IDE_CONFIG: "serverName=docker.php.cli"
      DEBRICKED_USER: ${DEBRICKED_USER}
      DEBRICKED_PWD: ${DEBRICKED_PWD}
      DEBRICKED_TOKEN_ENDPOINT: ${DEBRICKED_TOKEN_ENDPOINT}
      DEBRICKED_ENDPOINT: ${DEBRICKED_ENDPOINT}
      SLACK_DSN: ${SLACK_DSN}
      BLACKFIRE_SOCKET: tcp://webserver:8707
      REDIS_HOST: redis
      REDIS_PORT: 6379
      IN_DOCKER: "true"
    expose:
      - 9000
      - 9001
    ports:
      - "8000:8000"
    volumes:
      - ./:/var/www/html
    depends_on:
      - db
      - rabbitmq
      - mailhog
    entrypoint:
      - /bin/sh
      - -c
      - |
        apt-get update && \
        apt-get install -y libpq-dev libzip-dev zip unzip && \
        docker-php-ext-install pdo pdo_mysql && \
        mkdir -p /var/www/html/public/uploads && \
        chown -R www-data:www-data /var/www/html/public/uploads && \
        chmod -R 755 /var/www/html/public/uploads && \
        ip -4 route list match 0/0 | awk '{print $$3" host.docker.internal"}' >> /etc/hosts && \
        php-fpm --allow-to-run-as-root
    restart: on-failure
    tty: true
    user: root
    shm_size: 2g
    networks:
      - backend

  nginx:
    image: nginx:latest
    environment:
      DEBRICKED_USER: ${DEBRICKED_USER}
      DEBRICKED_PWD: ${DEBRICKED_PWD}
      DEBRICKED_TOKEN_ENDPOINT: ${DEBRICKED_TOKEN_ENDPOINT}
      DEBRICKED_ENDPOINT: ${DEBRICKED_ENDPOINT}
      SLACK_DSN: ${SLACK_DSN}
    ports:
      - "8888:80"
      - "8707:8707"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./:/var/www/html
    depends_on:
      - php
    restart: on-failure
    user: root
    networks:
      - backend
      - frontend

  messenger-consumer:
    image: ghcr.io/debricked/docker-image-php-xdebug:latest
    command: php bin/console messenger:consume async
    environment:
      DEBRICKED_USER: ${DEBRICKED_USER}
      DEBRICKED_PWD: ${DEBRICKED_PWD}
      DEBRICKED_TOKEN_ENDPOINT: ${DEBRICKED_TOKEN_ENDPOINT}
      DEBRICKED_ENDPOINT: ${DEBRICKED_ENDPOINT}
      SLACK_DSN: ${SLACK_DSN}
    entrypoint:
      - /bin/sh
      - -c
      - |
        apt-get update && \
        apt-get install -y libpq-dev libzip-dev zip unzip && \
        docker-php-ext-install pdo pdo_mysql && \
        php bin/console messenger:consume async
    depends_on:
      - php
    volumes:
      - ./:/var/www/html
    restart: always
    networks:
      - backend

  cron:
    image: my-php-cron-image
    volumes:
      - .:/app
    working_dir: /app
    entrypoint: /bin/sh -c "cron -f"
    depends_on:
      - php
    environment:
      - SYMFONY_ENV=dev

    networks:
      - backend